#include <GL/gl.h>
#include <GL/glu.h>
#include <GL/glut.h>
#include <algorithm>
#include <math.h>

int sfactor = GL_ONE;
int dfactor = GL_ONE_MINUS_SRC_ALPHA;
float dy=1;
float alpha=0.5;
float posZ=5;
float rot = 0.0;
float angle = 0.0;
float colorTable[15][4] = {
    {0.9059, 0.0235, 0.0157, 1.0},
    {0.8471, 0.0902, 0.0824, 1.0},
    {0.7882, 0.1569, 0.1529, 1.0},
    {0.7294, 0.2275, 0.2196, 1.0},
    {0.6706, 0.2941, 0.2902, 1.0},
    {0.6157, 0.3634, 0.3608, 1.0},
    {0.5569, 0.4314, 0.4275, 1.0},
    {0.4980, 0.4980, 0.4980, 1.0},
    {0.4392, 0.5686, 0.5686, 1.0},
    {0.3804, 0.6353, 0.6353, 1.0},
    {0.3255, 0.7059, 0.7059, 1.0},
    {0.2667, 0.7725, 0.7765, 1.0},
    {0.2078, 0.8431, 0.8431, 1.0},
    {0.1490, 0.9098, 0.9137, 1.0},
    {0.0941, 0.9765, 0.9843, 1.0}
};

void display() {
    glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT | GL_STENCIL_BUFFER_BIT);
    glClearColor(1.0, 1.0, 1.0, 1.0);
    glLoadIdentity ();
    gluLookAt(0.0, 4.0, 15.0, 0.0, 4.0, 0.0, 0.0, 1.0, 0.0);
    glRotatef(angle, 0.0, 1.0, 0.0);
    glTranslatef(-4,0.0, 0.0);

    glEnable (GL_STENCIL_TEST);
    glDisable (GL_DEPTH_TEST);

    glStencilFunc (GL_ALWAYS,0x00000001,0xFFFFFFFF);
    glStencilOp (GL_REPLACE,GL_REPLACE,GL_REPLACE);

    glColorMask(GL_FALSE, GL_FALSE, GL_FALSE, GL_FALSE);

    glEnable (GL_CULL_FACE);
    glCullFace(GL_FRONT);
    glDisable(GL_COLOR_MATERIAL);
    glDisable(GL_LIGHTING);

    for(int i = 0; i <= 15; i+=1) {
        for(int j = 0; j <= 15; j+=1) {
            glColor4f(colorTable[i+j][0], colorTable[i+j][1], colorTable[i+j][2], alpha);
            glBegin(GL_QUADS);
            glVertex3f(i, j+dy, 0);
            glVertex3f(i+1, j+dy, 0);
            glVertex3f(i+1, j-1+dy, 0);
            glVertex3f(i, j-1+dy, 0);
            glEnd();
        }
    }

    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);
    glDisable(GL_CULL_FACE);
    glColorMask(GL_TRUE, GL_TRUE, GL_TRUE, GL_TRUE);

    glEnable(GL_DEPTH_TEST);

    glStencilFunc (GL_EQUAL,0x00000001,0xFFFFFFFF);
    glStencilOp (GL_KEEP,GL_KEEP,GL_KEEP);

    glPushMatrix();
    glColor4f(0.5, 1.0, 0.5, 1.0);
    glTranslatef(4.0, 4.0, -posZ);
    glRotatef(-rot, 0.0, 1.0, 0.0);
    glPushMatrix();
        glTranslated(0.0, 0.0, 0.0);
        glScaled(0.7, 0.7, 0.7);
        glutSolidDodecahedron();
    glPopMatrix();
    //glutSolidTeapot(1);
    glPopMatrix();
    glDisable(GL_STENCIL_TEST);

    glEnable(GL_BLEND);
	glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);

    glDisable(GL_COLOR_MATERIAL);
    glDisable(GL_LIGHTING);
    for(int i = 0; i <= 7; i+=1) {
        for(int j = 0; j <= 7; j+=1) {
            glColor4f(colorTable[i+j][0], colorTable[i+j][1], colorTable[i+j][2], alpha);
            glBegin(GL_QUADS);
            glVertex3f(i, j+dy, 0);
            glVertex3f(i+1, j+dy, 0);
            glVertex3f(i+1, j-1+dy, 0);
            glVertex3f(i, j-1+dy, 0);
            glEnd();
        }
    }
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_LIGHTING);

    glPushMatrix();
    glColor4f(0.5, 1.0, 0.5, 1.0);
    glTranslatef(4.0, 4.0, posZ);
    glRotatef(rot, 0.0, 1.0, 0.0);
    glPushMatrix();
        glTranslated(0.0, 0.0, 0.0);
        glScaled(0.7, 0.7, 0.7);
        glutSolidDodecahedron();
    glPopMatrix();
    //glutSolidCube(1);
    //glutSolidTeapot(1);
    glPopMatrix();

    glFlush ();
    glutSwapBuffers();
    glutPostRedisplay();

}

void reshape(int w, int h) {
    glViewport(0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();

    gluPerspective(45.0, (GLfloat)w / (GLfloat)h, 1.5, 50.0);

    glMatrixMode(GL_MODELVIEW);
}

void keyboard(unsigned char key, int x, int y) {
    switch(key) {
    case 27 :
    case 'q':
        exit(0);
        break;
    case '+':
        alpha += 0.05;
        alpha = std::min(1.0f,alpha);
        break;
    case '-':
        alpha -= 0.05;
        alpha = std::max(0.0f,alpha);
        break;
    case 'e':
        rot-=1;
        break;
    case 'r':
        rot+=1;
        break;
    case 'a':
        angle-=0.5;
        break;
    case 'd':
        angle+=0.5;
        break;

    }
    glutPostRedisplay();
}


int main(int argc, char *argv[]) {
    glutInit(&argc, argv);
    glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_STENCIL);
    glutInitWindowSize(500, 500);
    glutCreateWindow("Lab4");
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutKeyboardFunc(keyboard);
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
    glEnable(GL_COLOR_MATERIAL);
    glEnable(GL_BLEND);
    glutMainLoop();
    return 0;
}
